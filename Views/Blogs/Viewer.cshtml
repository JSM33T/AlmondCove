@using almondCove.Controllers;
@using almondCove.Models.Props;

@{
    HTMLProps props = new()
            {
                DataBsTheme = "",
                HeaderClass = "navbar navbar-expand-lg fixed-top bg-light",
                IsLoaderActive = "",
                BodyClass="bg-secondary"
            };

    MetaProps meta = new()
            {
                Title = "Home",
            };


    ViewData["HtmlProps"] = props;
    ViewData["MetaProps"] = meta;
}


@{
     var htmlContent = ViewData["HtmlContent"] as string;
     var blogDeet = ViewData["blogdeet"] as BlogLoad;
}

@{

    if (Context.Session.GetString("role") != null && Context.Session.GetString("role") != "" && Context.Session.GetString("role") != "guest")
    {
        ViewData["BlogRole"] = Context.Session.GetString("role").ToString();
    }
    else
    {
        ViewData["BlogRole"] = "guest";
    }
}



    @Html.AntiForgeryToken()

    <div id="blogview">
        <section class="container blog-section py-5 mb-lg-4 mt-1 bg-faded-primary" id="blog_intro">
            <nav aria-label="breadcrumb" class="pt-4">
                <ol class=" pb-lg-4 pb-2 pt-4 breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/blogs">Blogs</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@blogDeet.Slug</li>
                </ol>
            </nav>
               <div class="row">

              <!-- Post title + post meta -->
              <div class="col-lg-12 pb-2 pb-lg-0 mb-4 mb-lg-0">
                <h1 class="display-4 pb-2 pb-lg-3">@blogDeet.Title</h1>
                <div class="d-flex flex-wrap align-items-center ml-2 mt-n2">
                  <span class="text-body-secondary fs-sm fw-normal p-0 mt-2 me-3">
                    <span id="likes"></span>
                    <i class="ai-heart fs-lg ms-1"></i>
                  </span>
                  <a class="nav-link position-relative text-body-secondary fs-sm fw-normal d-flex align-items-end p-0 mt-2" href="#comments" data-scroll data-scroll-offset="60">
                    <span class="position-absolute w-100 h-100 top-0 start-0" data-bs-toggle="collapse" data-bs-target="#commentsCollapse"></span>
                    12
                    <i class="ai-message fs-lg ms-1"></i>
                  </a>
                  <span class="fs-xs opacity-20 mt-2 mx-3">|</span>
                  <span class="fs-sm text-body-secondary mt-2" style="text-decoration:none" id="authorsPlaceholder2"></span>
                  <span class="fs-xs opacity-20 mt-2 mx-3">|</span>
                  <a class="badge text-nav fs-xs border mt-2" href="#">asa</a>
                </div>
              </div>

            </div>
        
              <section class="container ">
            <div class="row pt-xxl-2">
              <div class="col-lg-8 col-xl-8 pe-lg-4 pe-xl-0 pt-5 pb-5">
                    @Html.Raw(htmlContent)
              </div>


              <!-- Sidebar -->
              <aside class="col-lg-3 offset-lg-1 pt-4 pt-lg-4 pb-5" style="margin-top: -7rem;">
                <div class="position-sticky top-0 mt-2 mt-md-3 mt-lg-0" style="padding-top: 7rem;">

                  <!-- Sharing -->
                  <h4 class="mb-4">Share this post:</h4>
                  <div class="d-flex mt-n3 ms-n3 mb-lg-5 mb-4 pb-3 pb-lg-0">
                    <a class="btn btn-outline-secondary btn-icon btn-sm btn-instagram rounded-circle mt-3 ms-3" href="#" aria-label="Instagram">
                      <i class="ai-instagram"></i>
                    </a>
                    <a class="btn btn-outline-secondary btn-icon btn-sm btn-facebook rounded-circle mt-3 ms-3" href="#" aria-label="Facebook">
                      <i class="ai-facebook"></i>
                    </a>
                    <a class="btn btn-outline-secondary btn-icon btn-sm btn-telegram rounded-circle mt-3 ms-3" href="#" aria-label="Telegram">
                      <i class="ai-telegram"></i>
                    </a>
                    <a class="btn btn-outline-secondary btn-icon btn-sm btn-x rounded-circle mt-3 ms-3" href="#" aria-label="X">
                      <i class="ai-x"></i>
                    </a>
                  </div>

                  <!-- Relevant topics -->
                  <h4 class="pt-xl-1 mb-4">Tags:</h4>
                  <div class="d-flex flex-wrap mt-n3 ms-n3 mb-lg-5 mb-4 pb-3 pb-lg-0">
                      <span id="tagsPlaceholder"></span>
                  </div>
                </div>
              </aside>
            </div>
         </section>



        <div class="pt-4 pt-xl-5 mt-4">

            <div class="border-top border-bottom">
                <!-- Comments collapse-->
                <hr />
                <div class="collapse" id="commentsCollapse">
                    <div id="comments"></div>
                </div>
                <div class="nav">
                    <button class="btn-more nav-link collapsed w-100 justify-content-center p-3" type="button"
                            data-bs-toggle="collapse" data-bs-target="#commentsCollapse" aria-expanded="false"
                            aria-controls="commentsCollapse" data-show-label="Show all comments"
                            data-hide-label="Hide all comments">
                        <span class="fw-normal opacity-70 ms-1">
                            (<span id="blogcount"></span>)
                        </span>
                    </button>
                </div>
                <!-- Comment form-->
            </div>
        </div>

    </section>

    <section class="container pt-5 mt-5">
        <div class="card border-0 bg-secondary pt-2 pb-2 mt-2 p-md-2 p-xl-3 p-xxl-4 mt-n3 mt-md-0">
            <div class="card-body">
                @{
                    string role;
                    try
                    {
                        role = Context.Session.GetString("role");
                    }
                    catch
                    {
                        role = "guest";
                    }
                }
                @if (role != null)
                {
                    if (role != null && (role == "user" || role == "admin"))
                    {
                        <h2 class="pb-2 pb-lg-3 pb-xl-4">Leave a comment</h2>
                        <div class="row needs-validation g-4" novalidate>
                            <div class="col-12">
                                <label class="form-label" for="c-comment">Comment</label>
                                <textarea class="form-control" rows="4" id="blog_comment" placeholder="Type your comment here..."
                                          required></textarea>
                                <div class="invalid-feedback">Please enter a comment message!</div>
                            </div>
                            <div class="col-12">
                                <button 
                                    class="btn btn-primary ripple" 
                                    id="commentbutton" 
                                    type="button" 
                                    onclick="addcomment()">
                                    Post Comment
                                </button>
                            </div>
                        </div>
                        <span id="commentstat" hidden></span>
                    }
                    else
                    {
                        <span><a style="text-decoration:none" href="/account/login">login</a> to comment</span>
                    }
                }
                else
                {
                    <span><a style="text-decoration:none" href="/account/login">login</a> to comment</span>
                }
            </div>
        </div>
    </section>

    <div class="modal fade fade-in-smooth-pop" id="mdlDelete" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                    <button type="button" class="btn-close mdl-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Do you want to delete your comment?</p>
                </div>
                <div class="modal-footer flex-column flex-sm-row">
                    <button type="button" class="mdl-close btn ripple btn-secondary w-100 w-sm-auto mb-sm-0"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" onclick="cmntDeleteConfirm()"
                            class="btn btn-danger ripple w-100 w-sm-auto ms-sm-3">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade fade-in-smooth-pop" id="mdlreplyDelete" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                    <button type="button" class="btn-close mdl-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Do you want to delete your reply?</p>
                </div>
                <div class="modal-footer flex-column flex-sm-row">
                    <button type="button" class="mdl-close btn ripple btn-secondary w-100 w-sm-auto mb-sm-0"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" onclick="replyDeleteConfirm()"
                            class="btn btn-danger ripple w-100 w-sm-auto ms-sm-3">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade fade-in-smooth-pop" id="mdlEdit" tabindex="-1" role="dialog">
        <div class="modal-dialog " role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Edit</h4>
                    <button type="button" class="btn-close mdl-close" data-bs-toggle="modal" data-bs-target="#mdlEdit" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        <textarea class="form-control" rows="4" id="blog_commentEdit"
                                  placeholder="Type your comment here...(markups can be used and will be rendered as it is)"
                                  required=""></textarea>
                    </p>
                </div>
                <div class="modal-footer flex-column flex-sm-row">
                    <button type="button" class="btn mdl-close ripple btn-secondary w-100 w-sm-auto mb-sm-0"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" onclick="cmntEditSave()"
                            class="btn btn-primary ripple w-100 w-sm-auto ms-sm-3">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade fade-in-smooth-pop" id="mdlReply" tabindex="-1" role="dialog">
        <div class="modal-dialog " role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Reply</h4>
                    <button type="button" class="btn-close mdl-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        <textarea class="form-control" rows="4" id="blog_replyEdit"
                                  placeholder="Type your reply here..."></textarea>
                    </p>
                </div>
                <div class="modal-footer flex-column flex-sm-row">
                    <button type="button" class="mdl-close btn btn-secondary ripple w-100 w-sm-auto mb-sm-0"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" onclick="replyEditSave()"
                            class="btn btn-primary ripple w-100 w-sm-auto ms-sm-3">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" id="backdrop" style="display: none;"></div>
    <div id="mdladdReply" class="modal fade fade-in-smooth-pop" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Reply</h4>
                    <button type="button" class="btn-close mdl-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        <textarea class="form-control" rows="4" id="addReplybox"
                                  placeholder="Type your reply here..."></textarea>
                        <input id="addReplyboxid" style="display:none" value="" />
                    </p>
                </div>
                <div class="modal-footer flex-column flex-sm-row">
                    <button type="button" class="btn btn-secondary mdl-close ripple w-100 w-sm-auto mb-sm-0" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" onclick="replAdd()" class="btn ripple btn-primary w-100 w-sm-auto ms-sm-3">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
@* <script src="~/lib/vue/vue.global.min.js"></script> *@
<script src="~/lib/axios/dist/axios.min.js"></script>
<script type="module" src="~/assets/js/dedicated/blogs.js"></script>

<script>

    document.addEventListener('DOMContentLoaded', () => {
       
        loadTags();
        loadAuthors();
        loadComments();
        loadLikes();
        const closeBtns = document.querySelectorAll('.mdl-close');
        closeBtns.forEach(button => {
            button.addEventListener('click', () => {
                mdlCloseAll();
            });
        });
    });
    const tokenele = document.querySelector('input[name="__RequestVerificationToken"]');
    const token = tokenele.value;
    const config = {
        headers: {
            "Content-Type": "application/json",
            "RequestVerificationToken": token
        }
    };

    function isLiked()
    {

        //check if its likes by the logged in user
         const data = {
                        slug: "@blogDeet.Slug"
                    };
        axios.post('/api/blog/likestat', data, token)
            .then(response => {
                const isBlogLiked = response.data;
                if (isBlogLiked == true) {
                    cls.value = "-filled";
                }
                else {
                    cls.value = "";
                }
            })
           .catch(error => {
               console.log(error.response);
                        });
                            

    }

    function loadLikes()
    {
        const likes = document.getElementById("likes");
        console.log(likes.innerHTML);
        //get no of likes
        axios.get('/api/blog/@blogDeet.Slug/likes')
                        .then(response => {
                            likes.innerHTML = response.data;
                        })
                        .catch(error => {
                            likes.innerHTML = "0";
                        });
    }

    function addLike() { 

        //add a like
        if (cls.value == "") {
                        cls.value = "-filled";
                    }
                    else {
                        cls.value = "";
                    }
                    const likedata = {
                        Slug: "@blogDeet.Slug",
                    }
                    axios.post('/api/blog/addlike', likedata)
                        .then(response => {
                            console.log(response.data);
                            loadLikes();
                            isLiked();

                        })
                        .catch(error => {
                            cls.value = "";
                        });
    }

    function loadAuthors() {
        axios.get('/api/blog/@blogDeet.Slug/authors')
            .then(response => {
                const data = response.data;
                var authorsdat = "";
                var authorsdat2 = "";
                if (data.length != 0) {
                    for (var i = 0; i < data.length; i++) {
                        authorsdat2 = authorsdat2 + '<a href="/author/' + data[i].userName + '" class="no-decor">' + data[i].firstName + ' ' + data[i].lastName + '</a>, ';
                    }
                    document.getElementById('authorsPlaceholder2').innerHTML = authorsdat2.slice(0, authorsdat2.lastIndexOf(',')) + authorsdat2.slice(authorsdat2.lastIndexOf(',') + 1);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('authorsPlaceholder2').innerHTML = "unable to fetch authors' data";
            });
    }
    function addcomment() {
        const blgcmnt = document.getElementById('blog_comment');
        if (blgcmnt.value == "") {
            toaster("error", "comment too short");
        }
        else {
            const cmntBtn = document.getElementById('commentbutton');
            cmntBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>posting.. ';
            cmntBtn.classList.add('pe-none');
            axios({
                method: 'POST',
                url: '/api/blog/comment/add',
                headers: {
                    'Content-Type': 'application/json',
                },
                data: {
                    Slug: "@blogDeet.Slug",
                    Comment: blgcmnt.value,
                },
            })
                .then(function (response) {
                    cmntBtn.innerHTML = 'Post Comment';
                    loadComments();
                    cmntBtn.classList.remove('pe-none');
                    toaster('success', 'Comment added');
                    blgcmnt.value = "";
                })
                .catch(function (error) {
                    console.error('Error:', error);
                    cmntBtn.innerHTML = 'Post Comment';
                    cmntBtn.classList.remove('pe-none');
                    toaster('error', 'Something went wrong');
                });
        }
    }
    function cmntEdit(id) {
        localStorage.removeItem("editid");
        localStorage.setItem('editid', id);
        const v = localStorage.getItem('editid');
        const bedit = document.getElementById("blog_commentEdit");
        mdlOpen('mdlEdit');
        var cmntid = "cm_" + id;
        var p = document.getElementById(cmntid).innerHTML;
        bedit.value = p;
        if (p == "" || p == null) {
            bedit.value = p;
            alert("entity");
        }
    }
    function replyEdit(id) {
        localStorage.removeItem("replyid");
        localStorage.setItem('replyid', id);
        const v = localStorage.getItem('replyid');
        mdlOpen('mdlReply');
        const repedit = document.getElementById("blog_replyEdit");
        var replid = "reply_" + id;
        var p = document.getElementById(replid).innerHTML;
        repedit.value = p;
        if (p == "" || p == null) {
            repedit.value = p;
            alert("entity");
        }
    }
    function cmntEditSave() {
        var editId = localStorage.getItem('editid');
        var comment = document.querySelector("#blog_commentEdit");
        axios.post('/api/blog/comment/edit', {
            id: editId,
            comment: comment.value
        })
            .then(function (response) {
                loadComments();
                comment.value = "";
                mdlClose('mdlEdit');
                localStorage.removeItem("editid");
                toaster("success", "changes saved");
            })
            .catch(function (error) {
                console.error(error);
                toaster("error", "something went wrong");
            });
    }
    function replyEditSave() {
        let replyId = localStorage.getItem('replyid');
        let editedReply = document.getElementById('blog_replyEdit');
        axios({
            method: 'POST',
            url: '/api/blog/reply/edit',
            headers: {
                'Content-Type': 'application/json',
            },
            data: {
                replyId: replyId,
                reply: editedReply.value,
            },
        })
            .then(function (response) {
                loadComments();
                mdlClose('mdlReply');
                editedReply.value = '';
                toaster('Success', 'Reply edited successfully');
                localStorage.removeItem('replyid');
            })
            .catch(function (error) {
                console.error(error);
                toaster('error', 'Something went wrong');
            });
    }
    function cmntDelete(id) {
        localStorage.setItem('delid', id);
        const v = localStorage.getItem('delid');
        mdlOpen('mdlDelete');
    }
    function cmntDeleteConfirm() {
        axios.post('/api/blog/comment/delete', {
            id: localStorage.getItem('delid')
        })
            .then(function (response) {
                loadComments();
                mdlClose('mdlEdit');
                mdlClose('mdlDelete');
                localStorage.removeItem('delid');
                toaster("success", "comment deleted");
            })
            .catch(function (error) {
                console.error(error);
                mdlClose('mdlDelete');
                localStorage.removeItem('delid');
                toaster("error", "something went wrong");
            });
    }
    function cmntReply(id) {
        localStorage.setItem('replyto', id);
        const v = localStorage.getItem('replyto');
        const replbx = document.getElementById("addReplybox");
        replbx.value = "";
        mdlOpen('mdladdReply');
    }
    function mdlOpen(mdlId) {
        document.getElementById("backdrop").style.display = "block";
        document.getElementById(mdlId).style.display = "block";
        document.getElementById(mdlId).classList.add("show");
        var modal = document.getElementById(mdlId);
        window.onclick = function (event) {
            if (event.target == modal) {
                mdlClose(mdlId);
            }
        };
    }
    function mdlClose(mdlId) {
        document.getElementById("backdrop").style.display = "none";
        document.getElementById(mdlId).style.display = "none";
        document.getElementById(mdlId).classList.remove("show");
    }
    function mdlCloseAll() {
        const openModal = document.querySelector('.modal.show');
        if (openModal) {
            const modalId = openModal.getAttribute('id');
            const modal = new bootstrap.Modal(openModal);
            modal.hide();
            mdlClose(modalId);
        }
    }
    function replAdd() {
        const repltext = document.getElementById("addReplybox");
        axios({
            method: "POST",
            url: "/api/blog/reply/add",
            headers: {
                "Content-Type": "application/json",
            },
            data: {
                Slug: "@blogDeet.Slug",
                ReplyText: repltext.value,
                CommentId: localStorage.getItem("replyto"),
            },
        })
            .then(function (response) {
                loadComments();
                mdlClose("mdladdReply");
                toaster("Success", "Reply added");
            })
            .catch(function (error) {
                console.error("Error:", error);
                toaster("Error", error.response.data);
            });
    }
    function replyDelete(id) {
        localStorage.setItem('delid', id);
        const v = localStorage.getItem('delid');
        mdlOpen("mdlreplyDelete");
    }
    function loadTags() {
        var input = '@blogDeet.Tags';
        var parts = input.split(',');
        var tags = "";
        parts.forEach(function (part) {
            var words = part.split(' ');
            for (var i = 0; i < words.length; i++) {
               tags = tags + `<a class="btn btn-outline-secondary btn-sm rounded-pill mt-2 ms-2" href="/blogs/tag/${words[i]}">${words[i]}</a>`;

            }
        });
        document.getElementById('tagsPlaceholder').innerHTML = tags;
    }
    function loadComments() {
           const roleData = "guest";
           let c = 0;
           const data = {
               Slug: '@blogDeet.Slug'
           };

           axios.post("/api/blog/comments/load", data)
               .then((response) => {
                   response.data.sort((a, b) => a.id - b.id);
                   let commentsHTML = "";
                   if (response.data.length == 0) {
                       commentsHTML = "";
                   }
                   else {
                       for (let i = 0; i < response.data.length; i++) {
                           const comment = response.data[i];
                            c = i + 1;
                           commentsHTML += '<div class="border-bottom py-4 mt-2 mb-4">' +
                               '<div class="d-flex align-items-center pb-1 mb-3"> <img class="rounded-circle" src="/assets/images/avatars/default/' + comment.avatar + '.png" width="48" alt="Comment author">' +
                               '<div class="ps-3">' +
                               '<h6 class="mb-0">' + comment.fullname + ' </h6><span class="fs-sm text-muted">' + comment.date + '</span>' +
                               '</div>' +
                               '</div>' +
                               '<div class="btn-group-sm me-2 ml-2 mx-2" style="float:right;" role="group" aria-label="Settings group">' +
                               (roleData != 'guest' ? '<button type="button" id="repl_' + comment.id + '" onclick="cmntReply(' + comment.id + ')" class="btn btn-secondary btn-icon px-2"><i class="ai-redo"></i></button>&nbsp;' : '') +
                               (comment.edit ? '<button type="button" id="edt_' + comment.id + '" onclick="cmntEdit(' + comment.id + ')" class="btn btn-secondary btn-icon px-2"><i class="ai-edit"></i></button>&nbsp;' : '') +
                               (comment.edit ? '<button type="button" id="dlt_' + comment.id + '" onclick="cmntDelete(' + comment.id + ')" class="btn btn-secondary btn-icon px-2"><i class="ai-trash"></i></button>&nbsp;' : '') +
                               '</div>' +
                               '<span class="pb-2 mb-0" id="cm_' + comment.id + '">' + comment.comment + '</span>';

                           if (comment.replies && comment.replies.length > 0) {
                               comment.replies.sort((a, b) => a.replyId - b.replyId);
                               for (let j = 0; j < comment.replies.length; j++) {
                                   const reply = comment.replies[j];
                                   commentsHTML +=
                                       '<div class="card card-body border-0 bg-secondary mt-4">' +
                                       '    <div class="d-flex align-items-center pb-1 mb-3">' +
                                       '        <img class="rounded-circle" src="/assets/images/avatars/default/' + reply.replyAvatar + '.png" width="48" alt="Comment author">' +
                                       '        <div class="ps-3">' +
                                       '            <h6 class="mb-0">' + reply.replyFullName + '</h6><span class="fs-sm text-muted">' + reply.replyDate + '</span>' +
                                       '        </div>' +
                                       '    </div>' +
                                       '    <div class="d-flex align-items-center justify-content-between mb-3" role="group" aria-label="Settings group">' +
                                       '        <p class="mb-0"><a class="fw-bold text-decoration-none" href="#">@@' + comment.username + '</a>&nbsp;&nbsp;<span id="reply_' + reply.replyId + '">' + reply.replyComment + '</span></p>' +
                                       '        <div>' +
                                       (reply.replyEdit ? '<button type="button" id="edt' + reply.replyId + '" onclick="replyEdit(' + reply.replyId + ')" class="btn btn-sm btn-secondary btn-icon px-2"><i class="ai-edit"></i></button>&nbsp;' : '') +
                                       (reply.replyEdit ? '<button type="button" id="repldlt_' + reply.replyId + '" onclick="replyDelete(' + reply.replyId + ')" class="btn btn-sm btn-secondary btn-icon px-2"><i class="ai-trash"></i></button>&nbsp;' : '') +
                                       '        </div>' +
                                       '    </div>' +
                                       '</div>';

                               }
                           }
                           commentsHTML += `</div>`;
                       }
                   }

                   document.getElementById("comments").innerHTML = commentsHTML;
                   document.getElementById("blogcount").innerHTML = c.toString();
               })
               .catch((error) => {
                   if (error.response) {
                       const errorMessage = error.response.data.error;
                       console.error(errorMessage);
                   } else if (error.request) {
                       console.error('Network error:', error.request);
                   } else {
                       console.error('Error:', error.message);

                   }
                   document.getElementById("comments").innerHTML = "";
                   document.getElementById("blogcount").innerHTML = "0";

               });
    }

    function replyDeleteConfirm() {
        axios.post('/api/blog/reply/delete', {
            replyId: localStorage.getItem('delid')
        })
            .then(function (response) {
                mdlClose("mdlreplyDelete");
                loadComments();
                localStorage.removeItem('delid');
                toaster("success", "reply deleted");
            })
            .catch(function (error) {
                mdlClose("mdlreplyDelete");
                localStorage.removeItem('delid');
                toaster("error", "something went wrong");
            });
    }

    </script>